{"version":3,"file":"static/js/549.581541ee.chunk.js","mappings":"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","sources":["webpack://peep/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/profileInfo/ProfileStatusWithHooks.jsx","components/profile/profileInfo/ProfileDataForm.jsx","components/profile/profileInfo/ProfileInfo.jsx","webpack://peep/./src/components/profile/myPosts/post/Post.module.css?fa80","components/profile/myPosts/post/Post.jsx","webpack://peep/./src/components/profile/myPosts/MyPosts.module.css?000b","components/profile/myPosts/MyPosts.jsx","components/profile/myPosts/MyPostsContainer.jsx","components/profile/Profile.jsx","components/profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__n51iN\",\"userPhoto\":\"ProfileInfo_userPhoto__vrpo7\",\"contact\":\"ProfileInfo_contact__Fa5bW\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport { Textarea, Input, createField } from \"../../common/formsControls/FormsControls\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport c from '../../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={c.formSummaryError}>\r\n            {error}</div>}\r\n        <div>\r\n            <b>Full Name: </b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills: </b> {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {createField(\"About me..\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: </b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from \"react\";\r\nimport c from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/userPhoto.png';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { initialValues, reduxForm } from \"redux-form\";\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData);\r\n        setEditMode(false);\r\n    }\r\n\r\n    // const onSubmit = (formData) => {\r\n    //     saveProfile(formData).then(\r\n    //         () => {\r\n    //             setEditMode(false);\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={c.descriptionBlock}>\r\n                <img src='https://wallpapercave.com/wp/wp2461898.jpg' />\r\n                <img src={profile.photos.large || userPhoto} className={c.userPhoto} />\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full Name: </b>{profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills: </b>{profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b>{profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={c.contact}>\r\n        <b>{contactTitle}: </b>{contactValue}\r\n    </div>\r\n\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__4mLt8\"};","import React from \"react\";\r\nimport c from './Post.module.css'\r\n\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={c.post}>\r\n                 <img src={props.ava}/>\r\n                {props.message}\r\n            <div>\r\n                {props.likesCount} likes\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"myposts\":\"MyPosts_myposts__xFj9P\"};","import React from \"react\";\r\nimport Post from \"./post/Post\";\r\nimport c from \"./MyPosts.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\n\r\n\r\n{/*value={props.newPostText} ref={newPostElement}*/\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nconst PostForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name={\"newPostText\"} placeholder={\"type text\"}\r\n                           validate={[required, maxLength10]}/>\r\n                </div>\r\n                <button>Add post</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({form: 'newPostText'})(PostForm);\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElement = props.posts.map(p => <Post key={p.id} ava={p.ava} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={c.myposts}>\r\n            <h3>My Posts</h3>\r\n            <PostReduxForm onSubmit={onAddPost}/>\r\n            <div>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./profileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\n\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                saveProfile={props.saveProfile}\r\n                updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId;\r\n  /*          if(!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n    */    }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n        this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}   \r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n//    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","c","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","ProfileStatusWithHooks","ProfileDataForm","initialValues","formData","ava","message","likesCount","maxLength10","maxLengthCreator","PostReduxForm","Field","component","name","placeholder","validate","required","React","postsElement","posts","p","Post","id","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","compose","auth","isAuth","withRouter"],"sourceRoot":""}